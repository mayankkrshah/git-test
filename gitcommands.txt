1> Download Git

https://git-scm.com/book/en/v2/Getting-Started-Installing-Git

2> Download Github Gui

https://desktop.github.com/

3> Signup on Github

4> Create new repository

5> Copy link of remote repository which will be available once we create 
repository.

- to link local code base to remote one.

6> Setup username and email using the commands

git config --global user.name "Your name"
git config --global user.email "yourname@provider.com"

7> Check all git configurations using the command 
git config --list

8> Initializing Git Repository

- make a sample folder git-test
- It is a local repository and we need to make a remote repository
- run the command git init

9> Git will create hidden .git directory in the current folder. This folder
will contain object files which will be used by Git to store important 
information about the repository and keep track of changed files. Unless a folder
has a .git repository inside it, Git wont treat it as a repository.

10> Link local repository with remote repository using the command
git remote add origin repo-url


11> If we already have remote repository we can get the files using the command
git clone repo-url [folder]

folder is an optional path to the local folder which will be local repository.
If folder name is not given git will create new folder with the name same as 
remote repository name. This will initialize .git directory inside it and set
origin to repo-url. It will also pull code from remote repository into the 
local repository.



12> Check if local repository is tracking the remote repository using 
git remote -v command 


13> Replace remote url using the command 
git remote set-url origin repo-url

14> Commits
We commit only the changed files.
A commit logs a change or series of changed you have made to a file.
A series of commit is a git history. 
  
A commit object contains file change metadata, the name of the author of the 
commit, a timestamp of when commit was made, previous commit's hash. Based on 
this information hash of new commit is generated.
If any information inside a commit changes, hash will also change.

Whenever we use git push or git pull we are fetching or sending these commits 
to remote repository. Git on remote repository server then merges these commits
to its local repository.

Local repository has 3 different virtual zones or areas. working area, staging area and 
commit area. Working area is where you create new files, delete old files or 
make changes to already existing files. Staging area is also called the 'Index'.

Whenever we create a commit, Git will take changed code from staging area
and make a commit which it moves to commit area. Unless we use git push command,
these commits wont be sent to remote repository.

15> Checking the current status of a file
git status

16> Add a single file into staging area
git add add.js

17> Add all files including newly added, deleted and changed files.
git add -A stages all changes
git add . stages new files and modifications, without deletions
git add -u stages modifications and deletions, without new files


18> To unstage a file added by mistake in the staging area we can use the command
git reset add.js

19> Use git reset to unstage all files.
git reset

20> Commit the changes 
git commit -m "initial commit"
-m flag is used to insert a message that will describe the commit.

On commit the file using git commit -m "message" files will be committed
and it will show 
create mode 100644 divide.js

// Note: create mode indicates new file is added.


21> To see all commits in the repository made by all the developers use the command
git log

git log will show the commit hash, the author and the commit message along with
other details.

22> To see file that was changed or added in a commit, use stat argument with 
git log  like git log --stat.

got log --stat

23> To change message of previous commit 
git commend --amend -m "Initial Commit"
It will also change hash of the commit

If there is a new file or a changed file we can either create a new 
commit or add these files to old commit.
To add changes in the old commit 

- check newly modified files using git status
- stage a new file using the command git add -A
- git commit --amend

We can avoid edit message dialog using the command
git commit --amend --no-edit

To escape from vim we use ESC + :wq

Every time we tamper with the content of a commit, the hash
of the commit that was altered will change.


24> To push the local changes to the remote repository
for the first time use the command

git push -u origin master

With the help of above command we have successfully pushed
all pending changes from local repository to remote repository.

origin means push commits to remote repository URL with 
short name origin. master means master branch. 

-u combined with origin master sets the default remote repository
and branch to origin and master resp for current branch. Next time 
when we want to push some commits, we just have to use git push.
-u sets the upstream to origin master.

25> Reset repository to a revision

May be possible that you made a commit which you didnt want to make, so HEAD
is pointing to the last commit in git history.

To undo the commits and point to previous version in a repository

git reset --soft c953c62 - will remove all commits after commit c953c62 and
will bring all changed code in staging area.
All commits after this commit are removed from git repository.

git reset --mixed c953c62 - will remove all commits after commit c953c62 and
will bring all changed code to the working area. This command is same as 
git reset c953c62

git reset --hard c953c62 - Will remove all commits after commit c953c62 and
destroy all changed code after that. This will also remove all changed 
file in working or staging area. Hence git reset --hard HEAD is also used 
to get rid of all changes in the workking area or staging area.

Note: All untracked files(newly created files) will not be removed.

This command resets the Git hostory which can be dangerous.
Hence, make sure that you are altering commits that are not yet pushed to 
remote repository.


26> Use git diff to see what code changes between current state of the files
and the state of the files in the previous commit.

git diff filename

27> Check difference in file states between 2 commits
git diff hash1 hash2

hash1 and hash2 is starting few characters of commit hash.

hash1 should be newer than hash2


28> Set state of the file to state of file in HEAD commit
git checkout add.js

Note: add.js must be in working area for this command to work.

If branch has a name add.js or with similar name of the file then use
git checkout -- add.js, This will prevent going in different
branch.

You can use git checkout -- . which will checkout all the modified files.

29> Get rid of all the modifications made to tracked files, when files are 
in working area or staging area, use the command below. With the below command
it will remove all commits after HEAD and remove all local changes. Since 
there are no commits after HEAD it will end up removing all local changes.

git reset --hard HEAD 
or
git reset --hard

Note: We can also use git stash

30> To remove untracked files or folder in the repository

git clean -f -d

-d stands for includes directories as well.
-f stands for forced operation

https://git-scm.com/docs/git-clean. - other clean options

31> Branch

Git history is a series of commits linked together forming a chain. 
A branch is a chain with a name. When we add new commit it gets pushed to the top
of the chain. The top commit is called HEAD.

HEAD is a pointer to the last commit in a currently checked out branch.
Branch will remember last commit ans then that commit is linked to another commit.
branch = (commit, branch name)

When we initialize a repository, master is the default branch without any commits.
Once we make a commit that commit becomes a HEAD. Once we add more 
commits HEAD will point to whatever is at the top of the chain and 
branch has to remember only last commit. So branch is a tuple of
branch name and HEAD commit.

Whenever we create a new branch, the commit of new branch is taken from
the last commit of another branch. If we are inside master branch and
created a new branch, Git will pick up last from master branch. Once we switch 
the branch, HEAD will point to last commit of current branch.

 
31> List all branches

git branch

Will list all the branches. The one with asterisk is the current branch.

32> Create a new branch
git branch dev 

It will create dev branch, but we are still in master branch. To go in dev
branch we have to use checkout command.

git checkout dev

Above two commands can be executed using single command
git checkout -b dev









 
